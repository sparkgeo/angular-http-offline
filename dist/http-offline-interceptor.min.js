!function(){"use strict";angular.module("http-offline-interceptor",["http-offline-interceptor-buffer"]).factory("offlineService",["$rootScope","httpBuffer",function($rootScope,httpBuffer){return{retryRequests:function(){$rootScope.$broadcast("event:offline-retryRequests"),httpBuffer.retryAll()},cancelRequests:function(){httpBuffer.rejectAll(),$rootScope.$broadcast("event:offline-cancelRequests")}}}]).config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$rootScope","$q","httpBuffer",function($rootScope,$q,httpBuffer){return{responseError:function(rejection){var config=rejection.config||{};if(!config.ignoreOfflineModule)switch(rejection.status){case-1:delete config.transformResponse,delete config.transformRequest;var deferred=$q.defer(),bufferLength=httpBuffer.append(config);return 1===bufferLength&&$rootScope.$broadcast("event:offline-connectionRequired",rejection),deferred.promise}return $q.reject(rejection)}}}])}]),angular.module("http-offline-interceptor-buffer",["ngStorage"]).factory("httpBuffer",["$injector","$localStorage",function($injector,$localStorage){function retryHttpRequest(config){function successCallback(response){$q.resolve(response)}function errorCallback(response){$q.reject(response)}$q=$q||$injector.get("$q"),$http=$http||$injector.get("$http"),$http(config).then(successCallback,errorCallback)}$localStorage.buffer=$localStorage.buffer||[];var $http,$q;return{append:function(config){return $localStorage.buffer.push(config)},rejectAll:function(){$localStorage.buffer=[]},retryAll:function(){for(var i=0;i<$localStorage.buffer.length;++i)$localStorage.buffer[i]&&retryHttpRequest($localStorage.buffer[i]);$localStorage.buffer=[]}}}])}(),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="http-offline-interceptor");