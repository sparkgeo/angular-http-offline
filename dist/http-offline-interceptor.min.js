!function(){"use strict";angular.module("http-offline-interceptor",["http-offline-interceptor-buffer"]).factory("offlineService",["$rootScope","httpBuffer",function($rootScope,httpBuffer){return{retryRequests:function(data,configUpdater){var updater=configUpdater||function(config){return config};$rootScope.$broadcast("event:http-retryRequests",data),httpBuffer.retryAll(updater)},cancelRequests:function(data,reason){httpBuffer.rejectAll(reason),$rootScope.$broadcast("event:http-cancelRequests",data)}}}]).config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$rootScope","$q","httpBuffer",function($rootScope,$q,httpBuffer){return{responseError:function(rejection){var config=rejection.config||{};if(!config.ignoreOfflineModule)switch(rejection.status){case-1:return deferred=$q.defer(),bufferLength=httpBuffer.append(config,deferred),bufferLength>0&&console.log("Buffered request until back online",rejection),1===bufferLength&&$rootScope.$broadcast("event:http-connectionRequired",rejection),deferred.promise}return $q.reject(rejection)}}}])}]),angular.module("http-offline-interceptor-buffer",[]).factory("httpBuffer",["$injector",function($injector){function retryHttpRequest(config,deferred){function successCallback(response){deferred.resolve(response)}function errorCallback(response){deferred.reject(response)}$http=$http||$injector.get("$http"),$http(config).then(successCallback,errorCallback)}var $http,buffer=[];return{append:function(config,deferred){return buffer.push({config:config,deferred:deferred})},rejectAll:function(reason){if(reason)for(var i=0;i<buffer.length;++i)buffer[i].deferred.reject(reason);buffer=[]},retryAll:function(updater){for(var i=0;i<buffer.length;++i){var _cfg=updater(buffer[i].config);_cfg!==!1&&retryHttpRequest(_cfg,buffer[i].deferred)}buffer=[]}}}])}(),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="http-offline-interceptor");